/*
 * Copyright (c) 2010, Guoshen Yu <yu@cmap.polytechnique.fr>,
 *                     Guillermo Sapiro <guille@umn.edu>
 * All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/*----------------------------------- DCT2D ---------------------------------*/
// This code implements "DCT image denoising: a simple and effective image 
// denoising algorithm".
// http://www.ipol.im/pub/algo/ys_dct_denoising
// Copyright, Guoshen Yu, Guillermo Sapiro, 2010.
// Please report bugs and/or send comments to Guoshen Yu 
// yu@cmap.polytechnique.fr
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include "DCT2D16x16.h"
#include <assert.h>

# define PATCHSIZE 16


// Define a 16x16 1D DCT basis (each ROW is a vector of the forward
// transform basis).
const float DCTbasis[PATCHSIZE][PATCHSIZE] = {
    {   0.25000000000000000000000000000000000000000000000000,
        0.25000000000000000000000000000000000000000000000000,
        0.25000000000000000000000000000000000000000000000000,
        0.25000000000000000000000000000000000000000000000000,
        0.25000000000000000000000000000000000000000000000000,
        0.25000000000000000000000000000000000000000000000000,
        0.25000000000000000000000000000000000000000000000000,
        0.25000000000000000000000000000000000000000000000000,
        0.25000000000000000000000000000000000000000000000000,
        0.25000000000000000000000000000000000000000000000000,
        0.25000000000000000000000000000000000000000000000000,
        0.25000000000000000000000000000000000000000000000000,
        0.25000000000000000000000000000000000000000000000000,
        0.25000000000000000000000000000000000000000000000000,
        0.25000000000000000000000000000000000000000000000000,
        0.25000000000000000000000000000000000000000000000000,   },

    {   0.35185093438159564804834644746733829379081726074219,
      0.33832950029358815902114088203234132379293441772461,
      0.31180625324666783049210039280296768993139266967773,
      0.27330046675043939696791994720115326344966888427734,
      0.22429189658565909515353098413470434024930000305176,
      0.16666391461943663721001485100714489817619323730469,
      0.10263113188058936575686175274313427507877349853516,
      0.03465429229977286945674208595846721436828374862671,
      -0.03465429229977286945674208595846721436828374862671,
      -0.10263113188058936575686175274313427507877349853516,
      -0.16666391461943663721001485100714489817619323730469,
      -0.22429189658565909515353098413470434024930000305176,
      -0.27330046675043939696791994720115326344966888427734,
      -0.31180625324666783049210039280296768993139266967773,
      -0.33832950029358815902114088203234132379293441772461,
      -0.35185093438159564804834644746733829379081726074219,},


    {   0.34675996133053688108560663749813102185726165771484,
      0.29396890060483971129912106334813870489597320556641,
      0.19642373959677555950165128706430550664663314819336,
      0.06897484482073575062788250988887739367783069610596,
      -0.06897484482073575062788250988887739367783069610596,
      -0.19642373959677555950165128706430550664663314819336,
      -0.29396890060483971129912106334813870489597320556641,
      -0.34675996133053688108560663749813102185726165771484,
      -0.34675996133053688108560663749813102185726165771484,
      -0.29396890060483971129912106334813870489597320556641,
      -0.19642373959677555950165128706430550664663314819336,
      -0.06897484482073575062788250988887739367783069610596,
      0.06897484482073575062788250988887739367783069610596,
      0.19642373959677555950165128706430550664663314819336,
      0.29396890060483971129912106334813870489597320556641,
      0.34675996133053688108560663749813102185726165771484,},

    {   0.33832950029358815902114088203234132379293441772461,
      0.22429189658565906739795536850579082965850830078125,
      0.03465429229977286251784818205123883672058582305908,
      -0.16666391461943663721001485100714489817619323730469,
      -0.31180625324666783049210039280296768993139266967773,
      -0.35185093438159559253719521620951127260923385620117,
      -0.27330046675043934145676871594332624226808547973633,
      -0.10263113188058933800128613711422076448798179626465,
      0.10263113188058933800128613711422076448798179626465,
      0.27330046675043934145676871594332624226808547973633,
      0.35185093438159559253719521620951127260923385620117,
      0.31180625324666783049210039280296768993139266967773,
      0.16666391461943663721001485100714489817619323730469,
      -0.03465429229977286251784818205123883672058582305908,
      -0.22429189658565906739795536850579082965850830078125,
      -0.33832950029358815902114088203234132379293441772461,},

    {   0.32664074121909414394338000420248135924339294433594,
      0.13529902503654925305376366395648801699280738830566,
      -0.13529902503654925305376366395648801699280738830566,
      -0.32664074121909414394338000420248135924339294433594,
      -0.32664074121909414394338000420248135924339294433594,
      -0.13529902503654925305376366395648801699280738830566,
      0.13529902503654925305376366395648801699280738830566,
      0.32664074121909414394338000420248135924339294433594,
      0.32664074121909414394338000420248135924339294433594,
      0.13529902503654925305376366395648801699280738830566,
      -0.13529902503654925305376366395648801699280738830566,
      -0.32664074121909414394338000420248135924339294433594,
      -0.32664074121909414394338000420248135924339294433594,
      -0.13529902503654925305376366395648801699280738830566,
      0.13529902503654925305376366395648801699280738830566,
      0.32664074121909414394338000420248135924339294433594,},

    {   0.31180625324666783049210039280296768993139266967773,
      0.03465429229977286251784818205123883672058582305908,
      -0.27330046675043939696791994720115326344966888427734,
      -0.33832950029358821453229211329016834497451782226562,
      -0.10263113188058936575686175274313427507877349853516,
      0.22429189658565906739795536850579082965850830078125,
      0.35185093438159564804834644746733829379081726074219,
      0.16666391461943663721001485100714489817619323730469,
      -0.16666391461943663721001485100714489817619323730469,
      -0.35185093438159564804834644746733829379081726074219,
      -0.22429189658565906739795536850579082965850830078125,
      0.10263113188058936575686175274313427507877349853516,
      0.33832950029358821453229211329016834497451782226562,
      0.27330046675043939696791994720115326344966888427734,
      -0.03465429229977286251784818205123883672058582305908,
      -0.31180625324666783049210039280296768993139266967773,},

    {   0.29396890060483971129912106334813870489597320556641,
      -0.06897484482073579226124593333224765956401824951172,
      -0.34675996133053688108560663749813102185726165771484,
      -0.19642373959677553174607567143539199605584144592285,
      0.19642373959677553174607567143539199605584144592285,
      0.34675996133053688108560663749813102185726165771484,
      0.06897484482073579226124593333224765956401824951172,
      -0.29396890060483971129912106334813870489597320556641,
      -0.29396890060483971129912106334813870489597320556641,
      0.06897484482073579226124593333224765956401824951172,
      0.34675996133053688108560663749813102185726165771484,
      0.19642373959677553174607567143539199605584144592285,
      -0.19642373959677553174607567143539199605584144592285,
      -0.34675996133053688108560663749813102185726165771484,
      -0.06897484482073579226124593333224765956401824951172,
      0.29396890060483971129912106334813870489597320556641,},

    {   0.27330046675043939696791994720115326344966888427734,
      -0.16666391461943663721001485100714489817619323730469,
      -0.33832950029358821453229211329016834497451782226562,
      0.03465429229977287639563598986569559201598167419434,
      0.35185093438159564804834644746733829379081726074219,
      0.10263113188058935187907394492867751978337764739990,
      -0.31180625324666783049210039280296768993139266967773,
      -0.22429189658565909515353098413470434024930000305176,
      0.22429189658565909515353098413470434024930000305176,
      0.31180625324666783049210039280296768993139266967773,
      -0.10263113188058935187907394492867751978337764739990,
      -0.35185093438159564804834644746733829379081726074219,
      -0.03465429229977287639563598986569559201598167419434,
      0.33832950029358821453229211329016834497451782226562,
      0.16666391461943663721001485100714489817619323730469,
      -0.27330046675043939696791994720115326344966888427734,},

    {   0.25000000000000005551115123125782702118158340454102,
      -0.25000000000000005551115123125782702118158340454102,
      -0.25000000000000005551115123125782702118158340454102,
      0.25000000000000005551115123125782702118158340454102,
      0.25000000000000005551115123125782702118158340454102,
      -0.25000000000000005551115123125782702118158340454102,
      -0.25000000000000005551115123125782702118158340454102,
      0.25000000000000005551115123125782702118158340454102,
      0.25000000000000005551115123125782702118158340454102,
      -0.25000000000000005551115123125782702118158340454102,
      -0.25000000000000005551115123125782702118158340454102,
      0.25000000000000005551115123125782702118158340454102,
      0.25000000000000005551115123125782702118158340454102,
      -0.25000000000000005551115123125782702118158340454102,
      -0.25000000000000005551115123125782702118158340454102,
      0.25000000000000005551115123125782702118158340454102,},

    {   0.22429189658565909515353098413470434024930000305176,
      -0.31180625324666783049210039280296768993139266967773,
      -0.10263113188058937963464956055759103037416934967041,
      0.35185093438159564804834644746733829379081726074219,
      -0.03465429229977282088448475860786857083439826965332,
      -0.33832950029358815902114088203234132379293441772461,
      0.16666391461943658169886361974931787699460983276367,
      0.27330046675043934145676871594332624226808547973633,
      -0.27330046675043934145676871594332624226808547973633,
      -0.16666391461943658169886361974931787699460983276367,
      0.33832950029358815902114088203234132379293441772461,
      0.03465429229977282088448475860786857083439826965332,
      -0.35185093438159564804834644746733829379081726074219,
      0.10263113188058937963464956055759103037416934967041,
      0.31180625324666783049210039280296768993139266967773,
      -0.22429189658565909515353098413470434024930000305176,},

    {   0.19642373959677558725722690269321901723742485046387,
      -0.34675996133053693659675786875595804303884506225586,
      0.06897484482073573675009470207442063838243484497070,
      0.29396890060483971129912106334813870489597320556641,
      -0.29396890060483971129912106334813870489597320556641,
      -0.06897484482073573675009470207442063838243484497070,
      0.34675996133053693659675786875595804303884506225586,
      -0.19642373959677558725722690269321901723742485046387,
      -0.19642373959677558725722690269321901723742485046387,
      0.34675996133053693659675786875595804303884506225586,
      -0.06897484482073573675009470207442063838243484497070,
      -0.29396890060483971129912106334813870489597320556641,
      0.29396890060483971129912106334813870489597320556641,
      0.06897484482073573675009470207442063838243484497070,
      -0.34675996133053693659675786875595804303884506225586,
      0.19642373959677558725722690269321901723742485046387,},

    {   0.16666391461943669272116608226497191935777664184570,
      -0.35185093438159559253719521620951127260923385620117,
      0.22429189658565901188680413724796380847692489624023,
      0.10263113188058929636792271367085049860179424285889,
      -0.33832950029358821453229211329016834497451782226562,
      0.27330046675043939696791994720115326344966888427734,
      0.03465429229977293190678722112352261319756507873535,
      -0.31180625324666777498094916154514066874980926513672,
      0.31180625324666777498094916154514066874980926513672,
      -0.03465429229977293190678722112352261319756507873535,
      -0.27330046675043939696791994720115326344966888427734,
      0.33832950029358821453229211329016834497451782226562,
      -0.10263113188058929636792271367085049860179424285889,
      -0.22429189658565901188680413724796380847692489624023,
      0.35185093438159559253719521620951127260923385620117,
      -0.16666391461943669272116608226497191935777664184570,},

    {   0.13529902503654928080933927958540152758359909057617,
      -0.32664074121909414394338000420248135924339294433594,
      0.32664074121909414394338000420248135924339294433594,
      -0.13529902503654928080933927958540152758359909057617,
      -0.13529902503654928080933927958540152758359909057617,
      0.32664074121909414394338000420248135924339294433594,
      -0.32664074121909414394338000420248135924339294433594,
      0.13529902503654928080933927958540152758359909057617,
      0.13529902503654928080933927958540152758359909057617,
      -0.32664074121909414394338000420248135924339294433594,
      0.32664074121909414394338000420248135924339294433594,
      -0.13529902503654928080933927958540152758359909057617,
      -0.13529902503654928080933927958540152758359909057617,
      0.32664074121909414394338000420248135924339294433594,
      -0.32664074121909414394338000420248135924339294433594,
      0.13529902503654928080933927958540152758359909057617,},

    {   0.10263113188058933800128613711422076448798179626465,
      -0.27330046675043939696791994720115326344966888427734,
      0.35185093438159564804834644746733829379081726074219,
      -0.31180625324666788600325162406079471111297607421875,
      0.16666391461943666496559046663605840876698493957520,
      0.03465429229977289027342379768015234731137752532959,
      -0.22429189658565906739795536850579082965850830078125,
      0.33832950029358821453229211329016834497451782226562,
      -0.33832950029358821453229211329016834497451782226562,
      0.22429189658565906739795536850579082965850830078125,
      -0.03465429229977289027342379768015234731137752532959,
      -0.16666391461943666496559046663605840876698493957520,
      0.31180625324666788600325162406079471111297607421875,
      -0.35185093438159564804834644746733829379081726074219,
      0.27330046675043939696791994720115326344966888427734,
      -0.10263113188058933800128613711422076448798179626465,},

    {   0.06897484482073577838345812551779090426862239837646,
      -0.19642373959677555950165128706430550664663314819336,
      0.29396890060483971129912106334813870489597320556641,
      -0.34675996133053688108560663749813102185726165771484,
      0.34675996133053688108560663749813102185726165771484,
      -0.29396890060483971129912106334813870489597320556641,
      0.19642373959677555950165128706430550664663314819336,
      -0.06897484482073577838345812551779090426862239837646,
      -0.06897484482073577838345812551779090426862239837646,
      0.19642373959677555950165128706430550664663314819336,
      -0.29396890060483971129912106334813870489597320556641,
      0.34675996133053688108560663749813102185726165771484,
      -0.34675996133053688108560663749813102185726165771484,
      0.29396890060483971129912106334813870489597320556641,
      -0.19642373959677555950165128706430550664663314819336,
      0.06897484482073577838345812551779090426862239837646,},

    {   0.03465429229977292496789331721629423554986715316772,
      -0.10263113188058928249013490585639374330639839172363,
      0.16666391461943666496559046663605840876698493957520,
      -0.22429189658565903964237975287687731906771659851074,
      0.27330046675043939696791994720115326344966888427734,
      -0.31180625324666771946979793028731364756822586059570,
      0.33832950029358815902114088203234132379293441772461,
      -0.35185093438159559253719521620951127260923385620117,
      0.35185093438159559253719521620951127260923385620117,
      -0.33832950029358815902114088203234132379293441772461,
      0.31180625324666771946979793028731364756822586059570,
      -0.27330046675043939696791994720115326344966888427734,
      0.22429189658565903964237975287687731906771659851074,
      -0.16666391461943666496559046663605840876698493957520,
      0.10263113188058928249013490585639374330639839172363,
      -0.03465429229977292496789331721629423554986715316772}
};


// 1D DCT transform of a signal of size 8x1.
// flag: 1/-1 forward/inverse transforms.
void DCT1D16(vector< float >& in, vector< float >& out, int flag)
{
    assert((int)in.size() == PATCHSIZE);
    assert((int)out.size() == PATCHSIZE);

    // forward transform
    if ( flag == 1 ) {
        for (int j = 0; j < PATCHSIZE; j ++) {
            out[j] = 0;
            for (int i = 0; i < PATCHSIZE; i ++) {
                out[j] += in[i] * DCTbasis[j][i];
            }
        }
    }
    // reverse transform
    else if (flag == -1) {
        for (int j = 0; j < PATCHSIZE; j ++) {
            out[j] = 0;
            for (int i = 0; i < PATCHSIZE; i ++) {
                out[j] += in[i] * DCTbasis[i][j];
            }
        }
    } else {
        printf ("Error: DCT1D flag should be 1 (forward) or -1 (inverse). \n");
        //exit (1);
    }
}


// 2D DCT of a 16x16 patches. The result is restored in-place.
// flag: 1/-1 forward/inverse transforms.
void DCT2D16x16(vector< vector< float > >& patch1, int flag)
{
    std::vector< vector< float > > tmp1;
    tmp1.resize(PATCHSIZE);
    std::vector< vector< float > > tmp2;
    tmp2.resize(PATCHSIZE);
    for (int i = 0; i < PATCHSIZE; i ++) {
        tmp1[i].resize(PATCHSIZE);
        tmp2[i].resize(PATCHSIZE);
    }

    // transform row by row
    for (int j = 0; j < PATCHSIZE; j ++) {
        DCT1D16(patch1[j], tmp1[j], flag);
    }

    // transform column by column
    // (by transposing the matrix,
    // transforming row by row, and
    // transposing again the matrix.)
    for (int j = 0; j < PATCHSIZE; j ++) {
        for (int i = 0; i < PATCHSIZE; i ++)
            tmp2[j][i] = tmp1[i][j];
    }
    for (int j = 0; j < PATCHSIZE; j ++) {
        DCT1D16(tmp2[j], tmp1[j], flag);
    }
    for (int j = 0; j < PATCHSIZE; j ++) {
        for (int i = 0; i < PATCHSIZE; i ++)
            patch1[j][i] = tmp1[i][j];
    }
}
