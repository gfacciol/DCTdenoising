/*
 * Copyright (c) 2010, Guoshen Yu <yu@cmap.polytechnique.fr>,
 *                     Guillermo Sapiro <guille@umn.edu>
 * All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*----------------------------------- DCT2D ---------------------------------*/
// This code implements "DCT image denoising: a simple and effective image 
// denoising algorithm".
// http://www.ipol.im/pub/algo/ys_dct_denoising
// Copyright, Guoshen Yu, Guillermo Sapiro, 2010.
// Please report bugs and/or send comments to Guoshen Yu 
// yu@cmap.polytechnique.fr
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include "DCT2D.h"
#include <assert.h>

# define PATCHSIZE 8


// Define a 8x8 1D DCT basis (each ROW is a vector of the forward
// transform basis).
const float DCTbasis[PATCHSIZE][PATCHSIZE] = {
    {   0.35355339059327373085750423342688009142875671386719,
        0.35355339059327373085750423342688009142875671386719,
        0.35355339059327373085750423342688009142875671386719,
        0.35355339059327373085750423342688009142875671386719,
        0.35355339059327373085750423342688009142875671386719,
        0.35355339059327373085750423342688009142875671386719,
        0.35355339059327373085750423342688009142875671386719,
        0.35355339059327373085750423342688009142875671386719,   },

    {   0.49039264020161521528962111915461719036102294921875,
      0.41573480615127261783570133957255166023969650268555,
      0.27778511650980114433551193542371038347482681274414,
      0.09754516100806412404189416065491968765854835510254,
      -0.09754516100806412404189416065491968765854835510254,
      -0.27778511650980114433551193542371038347482681274414,
      -0.41573480615127261783570133957255166023969650268555,
      -0.49039264020161521528962111915461719036102294921875,    },

    {   0.46193976625564336924156805253005586564540863037109,
      0.19134171618254489088961634024599334225058555603027,
      -0.19134171618254489088961634024599334225058555603027,
      -0.46193976625564336924156805253005586564540863037109,
      -0.46193976625564336924156805253005586564540863037109,
      -0.19134171618254489088961634024599334225058555603027,
      0.19134171618254489088961634024599334225058555603027,
      0.46193976625564336924156805253005586564540863037109,     },

    {   0.41573480615127261783570133957255166023969650268555,
      -0.09754516100806417955304539191274670884013175964355,
      -0.49039264020161521528962111915461719036102294921875,
      -0.27778511650980108882436070416588336229324340820312,
      0.27778511650980108882436070416588336229324340820312,
      0.49039264020161521528962111915461719036102294921875,
      0.09754516100806417955304539191274670884013175964355,
      -0.41573480615127261783570133957255166023969650268555,    },

    {   0.35355339059327378636865546468470711261034011840820,
      -0.35355339059327378636865546468470711261034011840820,
      -0.35355339059327378636865546468470711261034011840820,
      0.35355339059327378636865546468470711261034011840820,
      0.35355339059327378636865546468470711261034011840820,
      -0.35355339059327378636865546468470711261034011840820,
      -0.35355339059327378636865546468470711261034011840820,
      0.35355339059327378636865546468470711261034011840820,     },

    {   0.27778511650980114433551193542371038347482681274414,
      -0.49039264020161532631192358167027123272418975830078,
      0.09754516100806412404189416065491968765854835510254,
      0.41573480615127261783570133957255166023969650268555,
      -0.41573480615127261783570133957255166023969650268555,
      -0.09754516100806412404189416065491968765854835510254,
      0.49039264020161532631192358167027123272418975830078,
      -0.27778511650980114433551193542371038347482681274414,    },

    {   0.19134171618254491864519195587490685284137725830078,
      -0.46193976625564336924156805253005586564540863037109,
      0.46193976625564336924156805253005586564540863037109,
      -0.19134171618254491864519195587490685284137725830078,
      -0.19134171618254491864519195587490685284137725830078,
      0.46193976625564336924156805253005586564540863037109,
      -0.46193976625564336924156805253005586564540863037109,
      0.19134171618254491864519195587490685284137725830078,     },

    {   0.09754516100806416567525758409828995354473590850830,
      -0.27778511650980108882436070416588336229324340820312,
      0.41573480615127267334685257083037868142127990722656,
      -0.49039264020161521528962111915461719036102294921875,
      0.49039264020161521528962111915461719036102294921875,
      -0.41573480615127267334685257083037868142127990722656,
      0.27778511650980108882436070416588336229324340820312,
      -0.09754516100806416567525758409828995354473590850830     }
};


// 1D DCT transform of a signal of size 8x1.
// flag: 1/-1 forward/inverse transforms.
void DCT1D(vector< float >& in, vector< float >& out, int flag)
{
    assert((int)in.size() == PATCHSIZE);
    assert((int)out.size() == PATCHSIZE);

    // forward transform
    if ( flag == 1 ) {
        for (int j = 0; j < PATCHSIZE; j ++) {
            out[j] = 0;
            for (int i = 0; i < PATCHSIZE; i ++) {
                out[j] += in[i] * DCTbasis[j][i];
            }
        }
    }
    // reverse transform
    else if (flag == -1) {
        for (int j = 0; j < PATCHSIZE; j ++) {
            out[j] = 0;
            for (int i = 0; i < PATCHSIZE; i ++) {
                out[j] += in[i] * DCTbasis[i][j];
            }
        }
    } else {
        printf ("Error: DCT1D flag should be 1 (forward) or -1 (inverse). \n");
        //exit (1);
    }
}


// 2D DCT of a 8x8 patches. The result is restored in-place.
// flag: 1/-1 forward/inverse transforms.
void DCT2D(vector< vector< float > >& patch1, int flag)
{
    std::vector< vector< float > > tmp1;
    tmp1.resize(PATCHSIZE);
    std::vector< vector< float > > tmp2;
    tmp2.resize(PATCHSIZE);
    for (int i = 0; i < PATCHSIZE; i ++) {
        tmp1[i].resize(PATCHSIZE);
        tmp2[i].resize(PATCHSIZE);
    }

    // transform row by row
    for (int j = 0; j < PATCHSIZE; j ++) {
        DCT1D(patch1[j], tmp1[j], flag);
    }

    // transform column by column
    // (by transposing the matrix,
    // transforming row by row, and
    // transposing again the matrix.)
    for (int j = 0; j < PATCHSIZE; j ++) {
        for (int i = 0; i < PATCHSIZE; i ++)
            tmp2[j][i] = tmp1[i][j];
    }
    for (int j = 0; j < PATCHSIZE; j ++) {
        DCT1D(tmp2[j], tmp1[j], flag);
    }
    for (int j = 0; j < PATCHSIZE; j ++) {
        for (int i = 0; i < PATCHSIZE; i ++)
            patch1[j][i] = tmp1[i][j];
    }
}
